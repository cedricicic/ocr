# InstantText OCR

**InstantText OCR** is a high-performance desktop utility that allows Windows, Linux, and Mac users to quickly capture screen regions and extract all recognized text—without the need for manual highlighting or additional steps. Built using Rust and Tauri for native performance, it integrates advanced OCR techniques to deliver immediate, accurate text extraction from screenshots.

---

## ✅ Current Implementation Status

This project has been successfully built and includes:

- ✅ **Tauri + Rust Backend**: Lightweight and efficient native application with minimal memory overhead
- ✅ **Tesseract.js Integration**: Advanced OCR text extraction capabilities
- ✅ **TypeScript + React Frontend**: Clean, responsive, and accessible UI built with modern web tooling
- ✅ **Tailwind CSS**: Modern styling with responsive design
- ✅ **Clipboard Automation**: Recognized text can be copied to clipboard automatically
- ✅ **Local Data Storage**: OCR results and settings are saved locally
- ✅ **Settings Management**: Configurable options for hotkeys, auto-copy, and more
- ✅ **History View**: Browse and manage previous OCR results
- ✅ **Cross-platform**: Builds successfully on macOS (and can be adapted for Windows/Linux)

---

## 🚀 Quick Start

### Prerequisites

- [Node.js](https://nodejs.org/) (v18 or later)
- [Rust](https://rustup.rs/) (latest stable)
- [Tauri CLI](https://tauri.app/v1/guides/getting-started/prerequisites)

### Installation & Development

1. **Clone and install dependencies:**
   ```bash
   git clone <repository-url>
   cd ocr
   npm install
   ```

2. **Run in development mode:**
   ```bash
   npm run tauri dev
   ```

3. **Build for production:**
   ```bash
   npm run tauri build
   ```

The built application will be available in `src-tauri/target/release/bundle/`.

---

## 📋 Features

- **Instant OCR**: Immediately extracts all text from selected screen regions using Tesseract.js
- **Modern UI**: Clean, intuitive interface with navigation between Capture, History, and Settings
- **Auto-Clipboard**: Optionally copies extracted text directly to clipboard
- **OCR History**: Stores and displays previous OCR results with timestamps and confidence scores
- **Configurable Settings**: 
  - Global hotkey customization
  - Auto-copy to clipboard toggle
  - Screenshot saving preferences
  - Autostart on boot option
- **Local Storage**: All data is stored locally in your home directory under "InstantText OCR"
- **Cross-Platform**: Native performance on macOS, Windows, and Linux

---

## 🏗️ Architecture

- **Frontend**: React + TypeScript + Tailwind CSS
- **Desktop Shell**: Tauri (Rust-based)
- **OCR Engine**: Tesseract.js with Web Workers for non-blocking processing
- **System Integration**:
  - Global hotkeys via Tauri plugin
  - Clipboard management via Tauri API
  - File system access for local storage
  - Cross-platform build system

---

## 🛠️ Development

### Project Structure

```
ocr/
├── src/                          # React frontend
│   ├── App.tsx                   # Main application component
│   ├── App.css                   # Tailwind CSS styles
│   └── types/tesseract.d.ts      # TypeScript definitions
├── src-tauri/                    # Rust backend
│   ├── src/
│   │   ├── lib.rs                # Core application logic
│   │   └── main.rs               # Entry point
│   ├── Cargo.toml                # Rust dependencies
│   └── tauri.conf.json           # Tauri configuration
├── package.json                  # Node.js dependencies
├── tailwind.config.js            # Tailwind configuration
└── vite.config.ts               # Vite build configuration
```

### Available Scripts

- `npm run dev` - Start Vite development server
- `npm run build` - Build frontend for production
- `npm run tauri dev` - Run Tauri app in development mode
- `npm run tauri build` - Build production Tauri app

---

## 🔧 Configuration

The application creates a configuration directory in your home folder:
- **macOS**: `~/InstantText OCR/`
- **Windows**: `%USERPROFILE%\InstantText OCR\`
- **Linux**: `~/InstantText OCR/`

Configuration files:
- `settings.json` - Application preferences
- `ocr_results.json` - OCR history
- `screenshots/` - Optional screenshot storage

---

## 🎯 Future Enhancements

While the core application is complete, potential future improvements include:

- Real screenshot capture integration (currently uses mock data)
- Advanced image preprocessing with OpenCV alternatives
- Multiple language support for OCR
- Export functionality for OCR results
- Sentry integration for error tracking
- Global shortcut functionality enhancement
- Batch processing capabilities

---

## 🤝 Contributing

1. Fork the repository
2. Create a feature branch: `git checkout -b feature-name`
3. Commit your changes: `git commit -am 'Add some feature'`
4. Push to the branch: `git push origin feature-name`
5. Submit a pull request

---

## 📄 License

This project is licensed under the MIT License - see the LICENSE file for details.

---

## 🙏 Acknowledgments

- [Tauri](https://tauri.app/) for the excellent desktop app framework
- [Tesseract.js](https://tesseract.projectnaptha.com/) for OCR capabilities
- [Tailwind CSS](https://tailwindcss.com/) for the styling system
- [Lucide React](https://lucide.dev/) for the icon set
